#!/bin/bash

## Backup all WordOps websites and upload them to Amazon S3

main() {

	## Load Configuration
	if [[ -r ~/.backup_sites_mysql_s3.conf ]] ; then
		. ~/.backup_sites_mysql_s3.conf
		s3_mysql=s3://$bucket/$server_name/$backup_folder/mysql
		s3_site=s3://$bucket/$server_name/$backup_folder/site
		s3_config=s3://$bucket/$server_name/$backup_folder/config/
		s3_log=s3://$bucket/$server_name/log
	else
		echo "ERROR - Settings file not found or not readable."; exit 1
	fi

	## Prepare automated restore list
	rlfilename=$tmp/restorelist-`/bin/date -u +"%Y%m%dT%H%M%SZ"`
	restorecmd=./wo-restore-site

	for domain in $(wo site list | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" | sort)
	do
		echo "Working on: $domain"

		### Determine site type
		cfg=$(wo site info $domain | grep configuration)
		if [[ $cfg =~ "wp wpredis" ]]; then
			echo $restorecmd $domain --wpredis >> $rlfilename
		elif [[ $cfg =~ "wp basic" ]]; then
			echo $restorecmd $domain --wp >> $rlfilename
		elif [[ $cfg =~ "mysql basic" ]]; then
			echo $restorecmd $domain --mysql >> $rlfilename
		else
			echo $restorecmd $domain >> $rlfilename
		fi

		### Backup the site files
		filename=$domain-`/bin/date -u +"%Y%m%dT%H%M%SZ"`.tgz
		nice -n 19 tar --atime-preserve -czf $tmp/$filename --directory=/var/www/$domain .
		aws s3 cp $s3options $tmp/$filename $s3_site/$domain/
		aws s3 ls $s3_site/$domain/$filename
		rm $tmp/$filename

		### Backup the site Database

		### Archive the access log files
		if ls /var/log/nginx/$domain.access.log-*.gz > /dev/null 2>&1; then
			aws s3 mv $s3options /var/log/nginx/$domain.access.log-*.gz $s3_log/$domain/
		fi
	done

	### Backup the site restore list
	aws s3 cp $s3options $rlfilename $s3_config
	rm $rlfilename

}

main "$@"
