#!/bin/bash
#
#  Restore EasyEngine v4 site
#
#  Usage: ee4-restore-site --domain=example.com --type=wp --ssl=self --cache
#

function main {

    # Load Configuration
    if [[ -r ~/.ee4-backup-settings.conf ]] ; then
         . ~/.ee4-backup-settings.conf
    else
         echo "ERROR - Settings file not found or not readable."; exit 1
    fi

	# Params:
	#  $1 = domain name --domain=example.tld
	#  $2 = site type --type=wp | --type=php | --type=html
	#  $3 = redis cache --cache
	#  $4 = letsencrypt --ssl=le & --wildcard | --ssl=self
	#  $5 = letsencrypt email --le-mail=webmaster@example.com
	#  $6 = admin email --admin-email=admin@example.com
	#  $7 = backup server name --s3_server_name=hosting1 (optional restore from a different server backup)

	## Argument pre-processing
	while [ "$#" -gt 0 ]; do
		case "$1" in
			## Short param method 
			#-s) shortname="$2"; shift 2;;
			## No arguments
			--cache) eecache="--cache"; shift 1;;
			--wildcard) eewildcard="--wildcard"; shift 1;;
			## Argument = required
			--domain=*) domain="${1#*=}"; shift 1;;
			--type=*) eetype="--type=${1#*=}"; shift 1;;
			--ssl=*) eessl="--ssl=${1#*=}"; shift 1;;
			--le-mail=*) eelemail="--le-email=${1#*=}"; shift 1;;
			--admin-email=*) eeadminemail="--admin-email=${1#*=}"; shift 1;;
			--s3_server_name=*) server_name="${1#*=}"; shift 1;; ## Override server_name from settings file
			--type|--ssl|--le-mail|--admin-email|--s3_server_name) echo "$1 requires an argument" >&2; exit 1;;
			## Error handling
			-*) echo "unknown option: $1" >&2; exit 1;;
			*) handle_argument "$1"; shift 1;;
		esac
	done
	echo "DEBUG - :domain: $domain  :type: $eetype  :ssl: $eessl  :le-mail: $eelemail  :admin-email: $eeadminemail  :s3_server_name: $s3_server_name  :cache: $eecache  :wildcard: $eewildcard"
	
	## Global LetsEncrypt email address from settings file
	ee config set le-mail $le_email

	## Determine container ids for shell commands
	db_container=`docker ps | grep services_global-db | awk  '{print $1}'`
	proxy_container=`docker ps | grep nginx-proxy | awk '{print $1}'`

	# Check site exists and delete. REVISE to use ee site command.
	if [ -d "/opt/easyengine/sites/$domain" ]; then
		echo delete $domain
		ee site delete $domain --yes
	fi

	## Create the site
	ee site create $domain $eetype $eessl $eelemail $eeadminemail $eecache $eewildcard

	## Restore the site
	restore_htdocs

	## Restore a WordPress site
	if [ $eetype = --type=wp ]; then
		get_vars
		restore_db
		restore_required_plugins
	fi

	## Enable the admin tools
	ee admin-tools enable $domain

} #main

function restore_htdocs {
	## Clean the site folder
	rm -rf /opt/easyengine/sites/$domain/app/htdocs/*

	## Determine the newest site backup file
	sitefile=`aws s3 ls s3://$bucket/$server_name/$htdoc_backup_folder/$domain/ | awk '{print $4}' | tail -1`
	## Download if needed the site backup file
	if [ ! -f $tmp/$sitefile ]; then
		aws s3 cp s3://$bucket/$server_name/$htdoc_backup_folder/$domain/$sitefile $tmp/
	fi

	## Decrypt the download
	sitefile2=${sitefile/.tgz.gpg/.tgz}
	gpg --decrypt $tmp/$sitefile > $tmp/$sitefile2
	## Extract the download
	tar xf $tmp/$sitefile2 -C /opt/easyengine/sites/$domain/app/htdocs/
	## Fix file and folder permissions
	find /opt/easyengine/sites/$domain/app/htdocs/ -type f -exec chmod 644 {} \;
	find /opt/easyengine/sites/$domain/app/htdocs/ -type d -exec chmod 755 {} \;
	chown -Rf www-data:www-data /opt/easyengine/sites/$domain/app/htdocs/
	rm $tmp/$domain*
}

function restore_db {
	## Drop all the tables (The MySQL equivalent to XOR AX, AX)
	ee shell $domain --command="mysqldump -h $db_host -u$db_user -p$db_password --no-data --add-drop-table $db_name | grep ^DROP | mysql -h $db_host -u$db_user -p$db_password $db_name"
	## Lookup the newest database backup
	dbfile=`aws s3 ls s3://$bucket/$server_name/$db_backup_folder/$domain/ | awk '{print $4}' | tail -1`
	## Build a filename without the .gpg
	dbfile2=${dbfile/.sql.gz.gpg/.sql.gz}
	## Now build a filename without the .gz
	dbfile3=${dbfile2/.sql.gz/.sql}
	## Download the newest database backup
	if [ ! -f /opt/easyengine/sites/$domain/app/$dbfile ]; then
		aws s3 cp $s3options s3://$bucket/$server_name/$db_backup_folder/$domain/$dbfile /opt/easyengine/sites/$domain/app/
	fi
	## Decrypt
	gpg --decrypt /opt/easyengine/sites/$domain/app/$dbfile > /opt/easyengine/sites/$domain/app/$dbfile2
	## Decompress
	gunzip /opt/easyengine/sites/$domain/app/$dbfile2
	## Restore the datbase into the container
	ee shell $domain --command="mysql -h $db_host -u $db_user -p$db_password $db_name < ../$dbfile3"
	rm /opt/easyengine/sites/$domain/app/$dbfile3*
	## Fix ee site info WP User & Password
	ee shell $domain --command="wp user create $wp_user $wp_email --user_pass=$wp_pass --role=administrator"
	ee shell $domain --command="wp user update $wp_email --user_pass=$wp_pass --skip-email"
	#ee shell 11r.com --command="wp user delete test@example.com --yes"
}

function restore_required_plugins {
	## Install any required plugins
	#ee shell $domain --command="wp plugin install https://downloads.wordpress.org/plugin/machete.zip --force --activate"
}

function get_vars {
	db_user=`ee site info $domain | grep 'DB User' | awk -F '|' '{print $3}' | awk '{print $1}'`
	db_password=`ee site info $domain | grep 'DB Password' | awk -F '|' '{print $3}' | awk '{print $1}'`
	db_host=`ee site info $domain | grep 'DB Host' | awk -F '|' '{print $3}' | awk '{print $1}'`
	db_name=`ee site info $domain | grep 'DB Name' | awk -F '|' '{print $3}' | awk '{print $1}'`
	wp_user=`ee site info $domain | grep 'WordPress Username' | awk -F '|' '{print $3}' | awk '{print $1}'`
	wp_pass=`ee site info $domain | grep 'WordPress Password' | awk -F '|' '{print $3}' | awk '{print $1}'`
	wp_email=`ee site info $domain | grep 'E-Mail' | awk -F '|' '{print $3}' | awk '{print $1}'`
}
main "$@"
